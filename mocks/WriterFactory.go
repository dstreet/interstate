// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// WriterFactory is an autogenerated mock type for the WriterFactory type
type WriterFactory struct {
	mock.Mock
}

type WriterFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *WriterFactory) EXPECT() *WriterFactory_Expecter {
	return &WriterFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: version
func (_m *WriterFactory) Execute(version uint64) (io.WriteCloser, error) {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (io.WriteCloser, error)); ok {
		return rf(version)
	}
	if rf, ok := ret.Get(0).(func(uint64) io.WriteCloser); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriterFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type WriterFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - version uint64
func (_e *WriterFactory_Expecter) Execute(version interface{}) *WriterFactory_Execute_Call {
	return &WriterFactory_Execute_Call{Call: _e.mock.On("Execute", version)}
}

func (_c *WriterFactory_Execute_Call) Run(run func(version uint64)) *WriterFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *WriterFactory_Execute_Call) Return(_a0 io.WriteCloser, _a1 error) *WriterFactory_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WriterFactory_Execute_Call) RunAndReturn(run func(uint64) (io.WriteCloser, error)) *WriterFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriterFactory creates a new instance of WriterFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriterFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *WriterFactory {
	mock := &WriterFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
