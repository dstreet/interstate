// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

type Datastore_Expecter struct {
	mock *mock.Mock
}

func (_m *Datastore) EXPECT() *Datastore_Expecter {
	return &Datastore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Datastore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Datastore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Datastore_Expecter) Close() *Datastore_Close_Call {
	return &Datastore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Datastore_Close_Call) Run(run func()) *Datastore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Datastore_Close_Call) Return(_a0 error) *Datastore_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_Close_Call) RunAndReturn(run func() error) *Datastore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *Datastore) Get() (uint64, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (uint64, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Datastore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Datastore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *Datastore_Expecter) Get() *Datastore_Get_Call {
	return &Datastore_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *Datastore_Get_Call) Run(run func()) *Datastore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Datastore_Get_Call) Return(version uint64, data []byte, err error) *Datastore_Get_Call {
	_c.Call.Return(version, data, err)
	return _c
}

func (_c *Datastore_Get_Call) RunAndReturn(run func() (uint64, []byte, error)) *Datastore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields:
func (_m *Datastore) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Datastore_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *Datastore_Expecter) Open() *Datastore_Open_Call {
	return &Datastore_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *Datastore_Open_Call) Run(run func()) *Datastore_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Datastore_Open_Call) Return(_a0 error) *Datastore_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_Open_Call) RunAndReturn(run func() error) *Datastore_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: version, data
func (_m *Datastore) Put(version uint64, data []byte) error {
	ret := _m.Called(version, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []byte) error); ok {
		r0 = rf(version, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Datastore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - version uint64
//   - data []byte
func (_e *Datastore_Expecter) Put(version interface{}, data interface{}) *Datastore_Put_Call {
	return &Datastore_Put_Call{Call: _e.mock.On("Put", version, data)}
}

func (_c *Datastore_Put_Call) Run(run func(version uint64, data []byte)) *Datastore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]byte))
	})
	return _c
}

func (_c *Datastore_Put_Call) Return(_a0 error) *Datastore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_Put_Call) RunAndReturn(run func(uint64, []byte) error) *Datastore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatastore creates a new instance of Datastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Datastore {
	mock := &Datastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
