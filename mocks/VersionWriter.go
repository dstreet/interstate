// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// VersionWriter is an autogenerated mock type for the VersionWriter type
type VersionWriter struct {
	mock.Mock
}

type VersionWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionWriter) EXPECT() *VersionWriter_Expecter {
	return &VersionWriter_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: version, data
func (_m *VersionWriter) Write(version uint64, data []byte) error {
	ret := _m.Called(version, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []byte) error); ok {
		r0 = rf(version, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type VersionWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - version uint64
//   - data []byte
func (_e *VersionWriter_Expecter) Write(version interface{}, data interface{}) *VersionWriter_Write_Call {
	return &VersionWriter_Write_Call{Call: _e.mock.On("Write", version, data)}
}

func (_c *VersionWriter_Write_Call) Run(run func(version uint64, data []byte)) *VersionWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]byte))
	})
	return _c
}

func (_c *VersionWriter_Write_Call) Return(_a0 error) *VersionWriter_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VersionWriter_Write_Call) RunAndReturn(run func(uint64, []byte) error) *VersionWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewVersionWriter creates a new instance of VersionWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionWriter {
	mock := &VersionWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
