// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	interstate "github.com/dstreet/interstate"
	mock "github.com/stretchr/testify/mock"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Expecter struct {
	mock *mock.Mock
}

func (_m *Node) EXPECT() *Node_Expecter {
	return &Node_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Node) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Node_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Node_Expecter) Close() *Node_Close_Call {
	return &Node_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Node_Close_Call) Run(run func()) *Node_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_Close_Call) Return(_a0 error) *Node_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_Close_Call) RunAndReturn(run func() error) *Node_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields:
func (_m *Node) Data() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Node_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *Node_Expecter) Data() *Node_Data_Call {
	return &Node_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *Node_Data_Call) Run(run func()) *Node_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_Data_Call) Return(_a0 []byte, _a1 error) *Node_Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Node_Data_Call) RunAndReturn(run func() ([]byte, error)) *Node_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *Node) Version() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type Node_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *Node_Expecter) Version() *Node_Version_Call {
	return &Node_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *Node_Version_Call) Run(run func()) *Node_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_Version_Call) Return(_a0 uint64, _a1 error) *Node_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Node_Version_Call) RunAndReturn(run func() (uint64, error)) *Node_Version_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ch
func (_m *Node) Watch(ch chan *interstate.Version) {
	_m.Called(ch)
}

// Node_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type Node_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ch chan *interstate.Version
func (_e *Node_Expecter) Watch(ch interface{}) *Node_Watch_Call {
	return &Node_Watch_Call{Call: _e.mock.On("Watch", ch)}
}

func (_c *Node_Watch_Call) Run(run func(ch chan *interstate.Version)) *Node_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan *interstate.Version))
	})
	return _c
}

func (_c *Node_Watch_Call) Return() *Node_Watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *Node_Watch_Call) RunAndReturn(run func(chan *interstate.Version)) *Node_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: version, data
func (_m *Node) Write(version uint64, data []byte) error {
	ret := _m.Called(version, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []byte) error); ok {
		r0 = rf(version, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Node_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - version uint64
//   - data []byte
func (_e *Node_Expecter) Write(version interface{}, data interface{}) *Node_Write_Call {
	return &Node_Write_Call{Call: _e.mock.On("Write", version, data)}
}

func (_c *Node_Write_Call) Run(run func(version uint64, data []byte)) *Node_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]byte))
	})
	return _c
}

func (_c *Node_Write_Call) Return(_a0 error) *Node_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_Write_Call) RunAndReturn(run func(uint64, []byte) error) *Node_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
